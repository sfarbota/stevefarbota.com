var expect = require('expect.js'),
  $ = require('../'),
  food = require('./fixtures').food,
  fruits = require('./fixtures').fruits,
  drinks = require('./fixtures').drinks,
  text = require('./fixtures').text;

describe('$(...)', function() {

  describe('.find', function() {

    it('() : should find nothing', function() {
      expect($('ul', fruits).find()).to.have.length(0);
    });

    it('(single) : should find one descendant', function() {
      expect($('#fruits', fruits).find('.apple')[0].attribs['class']).to.equal('apple');
    });

    it('(many) : should find all matching descendant', function() {
      expect($('#fruits', fruits).find('li')).to.have.length(3);
    });

    it('(many) : should merge all selected elems with matching descendants', function() {
      expect($('#fruits, #food', food).find('.apple')).to.have.length(1);
    });

    it('(invalid single) : should return empty if cant find', function() {
      expect($('ul', fruits).find('blah')).to.have.length(0);
    });

    it('(invalid single) : should query descendants only', function() {
      expect($('#fruits', fruits).find('ul')).to.have.length(0);
    });

    it('should return empty if search already empty result', function() {
      expect($('#fruits').find('li')).to.have.length(0);
    });

    it('should throw a SyntaxError if given an invalid selector', function() {
      expect(function() {
        $('#fruits').find(':bah');
      }).to.throwException(function(err) {
        expect(err).to.be.a(SyntaxError);
      });
    });

  });

  describe('.children', function() {

    it('() : should get all children', function() {
      expect($('ul', fruits).children()).to.have.length(3);
    });

    it('() : should return children of all matched elements', function() {
      expect($('ul ul', food).children()).to.have.length(5);
    });

    it('(selector) : should return children matching selector', function() {
      var cls = $('ul', fruits).children('.orange')[0].attribs['class'];
      expect(cls).to.equal('orange');
    });

    it('(invalid selector) : should return empty', function() {
      expect($('ul', fruits).children('.lulz')).to.have.length(0);
    });

    it('should only match immediate children, not ancestors', function() {
      expect($(food).children('li')).to.have.length(0);
    });

  });

  describe('.contents', function() {

    it('() : should get all contents', function() {
      expect($('p', text).contents()).to.have.length(5);
    });

    it('() : should include text nodes', function() {
      expect($('p', text).contents().first()[0].type).to.equal('text');
    });

    it('() : should include comment nodes', function() {
      expect($('p', text).contents().last()[0].type).to.equal('comment');
    });

  });

  describe('.next', function() {

    it('() : should return next element', function() {
      var cls = $('.orange', fruits).next()[0].attribs['class'];
      expect(cls).to.equal('pear');
    });

    it('(no next) : should return empty for last child', function() {
      expect($('.pear', fruits).next()).to.have.length(0);
    });

    it('(next on empty object) : should return empty', function() {
      expect($('.banana', fruits).next()).to.have.length(0);
    });

    it('() : should operate over all elements in the selection', function() {
      expect($('.apple, .orange', food).next()).to.have.length(2);
    });

  });

  describe('.nextAll', function() {

    it('() : should return all following siblings', function() {
      var elems = $('.apple', fruits).nextAll();
      expect(elems).to.have.length(2);
      expect(elems[0].attribs['class']).to.equal('orange');
      expect(elems[1].attribs['class']).to.equal('pear');
    });

    it('(no next) : should return empty for last child', function() {
      expect($('.pear', fruits).nextAll()).to.have.length(0);
    });

    it('(nextAll on empty object) : should return empty', function() {
      expect($('.banana', fruits).nextAll()).to.have.length(0);
    });

    it('() : should operate over all elements in the selection', function() {
      expect($('.apple, .carrot', food).nextAll()).to.have.length(3);
    });

    it('() : should not contain duplicate elements', function() {
      var elems = $('.apple, .orange', food);
      expect(elems.nextAll()).to.have.length(2);
    });

  });

  describe('.nextUntil', function() {

    it('() : should return all following siblings if no selector specified', function() {
      var elems = $('.apple', food).nextUntil();
      expect(elems).to.have.length(2);
      expect(elems[0].attribs['class']).to.equal('orange');
      expect(elems[1].attribs['class']).to.equal('pear');
    });

    it('() : should filter out non-element nodes', function() {
      var elems = $('<div><div></div><!-- comment -->text<div></div></div>');
      var div = elems.children().eq(0);
      expect(div.nextUntil()).to.have.length(1);
    });

    it('() : should operate over all elements in the selection', function() {
      var elems = $('.apple, .carrot', food);
      expect(elems.nextUntil()).to.have.length(3);
    });

    it('() : should not contain duplicate elements', function() {
      var elems = $('.apple, .orange', food);
      expect(elems.nextUntil()).to.have.length(2);
    });

    it('(selector) : should return all following siblings until selector', function() {
      var elems = $('.apple', food).nextUntil('.pear');
      expect(elems).to.have.length(1);
      expect(elems[0].attribs['class']).to.equal('orange');
    });

    it('(selector not sibling) : should return all following siblings', function() {
      var elems = $('.apple', fruits).nextUntil('#vegetables');
      expect(elems).to.have.length(2);
    });

    it('(selector, filterString) : should return all following siblings until selector, filtered by filter', function() {
      var elems = $('.beer', drinks).nextUntil('.water', '.milk');
      expect(elems).to.have.length(1);
      expect(elems[0].attribs['class']).to.equal('milk');
    });

    it('() : should return an empty object for last child', function() {
      expect($('.pear', fruits).nextUntil()).to.have.length(0);
    });

    it('() : should return an empty object when called on an empty object', function() {
      expect($('.banana', fruits).nextUntil()).to.have.length(0);
    });

    it('(node) : should return all following siblings until the node', function() {
      var $fruits = $(fruits).children();
      var elems = $fruits.eq(0).nextUntil($fruits[2]);
      expect(elems).to.have.length(1);
    });

    it('(cheerio object) : should return all following siblings until any member of the cheerio object', function() {
      var $drinks = $(drinks).children();
      var $until = $([$drinks[4], $drinks[3]]);
      var elems = $drinks.eq(0).nextUntil($until);
      expect(elems).to.have.length(2);
    });

  });

  describe('.prev', function() {

    it('() : should return previous element', function() {
      var cls = $('.orange', fruits).prev()[0].attribs['class'];
      expect(cls).to.equal('apple');
    });

    it('(no prev) : should return empty for first child', function() {
      expect($('.apple', fruits).prev()).to.have.length(0);
    });

    it('(prev on empty object) : should return empty', function() {
      expect($('.banana', fruits).prev()).to.have.length(0);
    });

    it('() : should operate over all elements in the selection', function() {
      expect($('.orange, .pear', food).prev()).to.have.length(2);
    });

  });

  describe('.prevAll', function() {

    it('() : should return all preceding siblings', function() {
      var elems = $('.pear', fruits).prevAll();
      expect(elems).to.have.length(2);
      expect(elems[0].attribs['class']).to.equal('orange');
      expect(elems[1].attribs['class']).to.equal('apple');
    });

    it('(no prev) : should return empty for first child', function() {
      expect($('.apple', fruits).prevAll()).to.have.length(0);
    });

    it('(prevAll on empty object) : should return empty', function() {
      expect($('.banana', fruits).prevAll()).to.have.length(0);
    });

    it('() : should operate over all elements in the selection', function() {
      expect($('.orange, .sweetcorn', food).prevAll()).to.have.length(2);
    });

    it('() : should not contain duplicate elements', function() {
      var elems = $('.orange, .pear', food);
      expect(elems.prevAll()).to.have.length(2);
    });

  });

  describe('.prevUntil', function() {

    it('() : should return all preceding siblings if no selector specified', function() {
      var elems = $('.pear', fruits).prevUntil();
      expect(elems).to.have.length(2);
      expect(elems[0].attribs['class']).to.equal('orange');
      expect(elems[1].attribs['class']).to.equal('apple');
    });

    it('() : should filter out non-element nodes', function() {
      var elems = $('<div class="1"><div class="2"></div><!-- comment -->text<div class="3"></div></div>');
      var div = elems.children().last();
      expect(div.prevUntil()).to.have.length(1);
    });

    it('() : should operate over all elements in the selection', function() {
      var elems = $('.pear, .sweetcorn', food);
      expect(elems.prevUntil()).to.have.length(3);
    });

    it('() : should not contain duplicate elements', function() {
      var elems = $('.orange, .pear', food);
      expect(elems.prevUntil()).to.have.length(2);
    });

    it('(selector) : should return all preceding siblings until selector', function() {
      var elems = $('.pear', fruits).prevUntil('.apple');
      expect(elems).to.have.length(1);
      expect(elems[0].attribs['class']).to.equal('orange');
    });

    it('(selector not sibling) : should return all preceding siblings', function() {
      var elems = $('.sweetcorn', food).prevUntil('#fruits');
      expect(elems).to.have.length(1);
      expect(elems[0].attribs['class']).to.equal('carrot');
    });

    it('(selector, filterString) : should return all preceding siblings until selector, filtered by filter', function() {
      var elems = $('.cider', drinks).prevUntil('.juice', '.water');
      expect(elems).to.have.length(1);
      expect(elems[0].attribs['class']).to.equal('water');
    });

    it('() : should return an empty object for first child', function() {
      expect($('.apple', fruits).prevUntil()).to.have.length(0);
    });

    it('() : should return an empty object when called on an empty object', function() {
      expect($('.banana', fruits).prevUntil()).to.have.length(0);
    });

    it('(node) : should return all previous siblings until the node', function() {
      var $fruits = $(fruits).children();
      var elems = $fruits.eq(2).prevUntil($fruits[0]);
      expe